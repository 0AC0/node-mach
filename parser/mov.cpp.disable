#include "../hpp/parser/mov.hpp"

#define REGVAL(reg)								\
switch (reg2) {								\
	case 0x00:								\
		Registers:: reg (bytes[3]);					\
		dbg() << #reg << " = ( 8)" << (uintmax_t)Registers:: reg ();	\
		p->consume(sizeof(uint8_t) + 1);				\
		p->advance(sizeof(uint8_t) + 1);				\
		break;								\
	case 0x01:								\
		Registers:: reg (*(uint16_t*)&bytes[3]);			\
		dbg() << #reg << " = (16)" << (uintmax_t)Registers:: reg ();	\
		p->consume(sizeof(uint16_t) + 1);				\
		p->advance(sizeof(uint16_t) + 1);				\
		break;								\
	case 0x02:								\
		Registers:: reg (*(uint32_t*)&bytes[3]);			\
		dbg() << #reg << " = (32)" << (uintmax_t)Registers:: reg ();	\
		p->consume(sizeof(uint32_t) + 1);				\
		p->advance(sizeof(uint32_t) + 1);				\
		break;								\
	case 0x03:								\
		Registers:: reg (*(uint64_t*)&bytes[3]);			\
		dbg() << #reg << " = (64)" << (uintmax_t)Registers:: reg ();	\
		p->consume(sizeof(uint64_t) + 1);				\
		p->advance(sizeof(uint64_t) + 1);				\
		break;								\
	default: 								\
		dbg("[2;30;1m[[0;31;2m  DEAD  [30;1m][m ")		\
			<< "Unknown size on mov reg, val: " << (uintmax_t)reg2;	\
		return 1;							\
}

#define REGMEM(reg)								\
switch (reg2) {								\
	case 0x00:								\
		if (*(uint64_t*)&bytes[3] > p->mem_size) {			\
			dbg("[2;30;1m[[0;31;2m  DEAD  [30;1m][m ")	\
			<< "mov " << #reg					\
			<< " [" << *(uint64_t*)&bytes[3] << ']' 		\
			<< " out of bounds"; 					\
			return 1;						\
		}								\
		Registers:: reg (*(uint8_t*)&p->memory[*(uint64_t*)&bytes[3]]);	\
		dbg() << #reg << " = ( 8)" << (uintmax_t)Registers:: reg ()	\
			<< " from addr [" << *(uint64_t*)&bytes[3] << ']';	\
		p->consume(sizeof(uint64_t) + 1);				\
		p->advance(sizeof(uint64_t) + 1);				\
		break;								\
	case 0x01:								\
		if (*(uint64_t*)&bytes[3] > p->mem_size) {			\
			dbg("[2;30;1m[[0;31;2m  DEAD  [30;1m][m ")	\
			<< "mov " << #reg					\
			<< " [" << *(uint64_t*)&bytes[3] << ']'			\
			<< " out of bounds"; 					\
			return 1;						\
		}								\
		Registers:: reg (*(uint16_t*)&p->memory[*(uint64_t*)&bytes[3]]);\
		dbg() << #reg << " = (16)" << (uintmax_t)Registers:: reg ()	\
			<< " from addr [" << *(uint64_t*)&bytes[3] << ']';	\
		p->consume(sizeof(uint64_t) + 1);				\
		p->advance(sizeof(uint64_t) + 1);				\
		break;								\
	case 0x02:								\
		if (*(uint64_t*)&bytes[3] > p->mem_size) {			\
			dbg("[2;30;1m[[0;31;2m  DEAD  [30;1m][m ")	\
			<< "mov " << #reg					\
			<< " [" << *(uint64_t*)&bytes[3] << ']'			\
			<< " out of bounds"; 					\
			return 1;						\
		}								\
		Registers:: reg (*(uint32_t*)&p->memory[*(uint64_t*)&bytes[3]]);\
		dbg() << #reg << " = (32)" << (uintmax_t)Registers:: reg ()	\
			<< " from addr [" << *(uint64_t*)&bytes[3] << ']';	\
		p->consume(sizeof(uint64_t) + 1);				\
		p->advance(sizeof(uint64_t) + 1);				\
		break;								\
	case 0x03:								\
		if (*(uint64_t*)&bytes[3] > p->mem_size) {			\
			dbg("[2;30;1m[[0;31;2m  DEAD  [30;1m][m ")	\
			<< "mov " << #reg					\
			<< " [" << *(uint64_t*)&bytes[3] << ']' 		\
			<< " out of bounds"; 					\
			return 1;						\
		}								\
		Registers:: reg (*(uint64_t*)&p->memory[*(uint64_t*)&bytes[3]]);\
		dbg() << #reg << " = (64)" << (uintmax_t)Registers:: reg ()	\
			<< " from addr [" << *(uint64_t*)&bytes[3] << ']';	\
		p->consume(sizeof(uint64_t) + 1);				\
		p->advance(sizeof(uint64_t) + 1);				\
		break;								\
	default: 								\
		dbg("[2;30;1m[[0;31;2m  DEAD  [30;1m][m ")		\
			<< "Unknown size on mov reg, [val]: " << (uintmax_t)reg2;\
		return 1;							\
}

#define MEMREG(reg)								\
switch (reg2) {								\
	case 0x00:								\
		if (*(uint64_t*)&bytes[3] > p->mem_size) {			\
			dbg("[2;30;1m[[0;31;2m  DEAD  [30;1m][m ")	\
			<< "mov "						\
			<< " [" << *(uint64_t*)&bytes[3] << ']' 		\
			<< #reg							\
			<< " out of bounds"; 					\
			return 1;						\
		}								\
		p->memory[*(uint64_t*)&bytes[3]] = (uint8_t)Registers:: reg ();	\
		dbg() << "[" << *(uint64_t*)&bytes[3] << ']'		 	\
			<< " = ( 8)" << #reg << " ("				\
			<< (uintmax_t)(uint8_t)Registers:: reg () << ')';	\
		p->consume(sizeof(uint64_t) + 1);				\
		p->advance(sizeof(uint64_t) + 1);				\
		break;								\
	case 0x01:								\
		if (*(uint64_t*)&bytes[3] > p->mem_size) {			\
			dbg("[2;30;1m[[0;31;2m  DEAD  [30;1m][m ")	\
			<< "mov "						\
			<< " [" << *(uint64_t*)&bytes[3] << ']' 		\
			<< #reg							\
			<< " out of bounds"; 					\
			return 1;						\
		}								\
		*(uint16_t*)&p->memory[*(uint64_t*)&bytes[3]] = (uint16_t)Registers:: reg ();\
		dbg() << "[" << *(uint64_t*)&bytes[3] << ']'		 	\
			<< " = (16)" << #reg << " ("				\
			<< (uintmax_t)(uint16_t)Registers:: reg () << ')';	\
		p->consume(sizeof(uint64_t) + 1);				\
		p->advance(sizeof(uint64_t) + 1);				\
		break;								\
	case 0x02:								\
		if (*(uint64_t*)&bytes[3] > p->mem_size) {			\
			dbg("[2;30;1m[[0;31;2m  DEAD  [30;1m][m ")	\
			<< "mov "						\
			<< " [" << *(uint64_t*)&bytes[3] << ']' 		\
			<< #reg							\
			<< " out of bounds"; 					\
			return 1;						\
		}								\
		*(uint32_t*)&p->memory[*(uint64_t*)&bytes[3]] = (uint32_t)Registers:: reg ();\
		dbg() << "[" << *(uint64_t*)&bytes[3] << ']'		 	\
			<< " = (32)" << #reg << " ("				\
			<< (uintmax_t)(uint32_t)Registers:: reg () << ')';	\
		p->consume(sizeof(uint64_t) + 1);				\
		p->advance(sizeof(uint64_t) + 1);				\
		break;								\
	case 0x03:								\
		if (*(uint64_t*)&bytes[3] > p->mem_size) {			\
			dbg("[2;30;1m[[0;31;2m  DEAD  [30;1m][m ")	\
			<< "mov "						\
			<< " [" << *(uint64_t*)&bytes[3] << ']' 		\
			<< #reg							\
			<< " out of bounds"; 					\
			return 1;						\
		}								\
		*(uint64_t*)&p->memory[*(uint64_t*)&bytes[3]] = (uint64_t)Registers:: reg ();\
		dbg() << "[" << *(uint64_t*)&bytes[3] << ']'		 	\
			<< " = (64)" << #reg << " ("				\
			<< (uintmax_t)(uint64_t)Registers:: reg () << ')';	\
		p->consume(sizeof(uint64_t) + 1);				\
		p->advance(sizeof(uint64_t) + 1);				\
		break;								\
	default: 								\
		dbg("[2;30;1m[[0;31;2m  DEAD  [30;1m][m ")		\
			<< "Unknown size on mov reg, [val]: " << (uintmax_t)reg2;\
		return 1;							\
}

#define REGREG(reg)								\
switch (reg2) {								\
	case 0x00:								\
		Registers:: reg (Registers::a());				\
		dbg() << #reg << " = a(" << (uintmax_t)Registers::a() << ')';	\
		p->consume();							\
		p->advance();							\
		break;								\
	case 0x01:								\
		Registers:: reg (Registers::b());				\
		dbg() << #reg << " = b(" << (uintmax_t)Registers::b() << ')';	\
		p->consume();							\
		p->advance();							\
		break;								\
	case 0x02:								\
		Registers:: reg (Registers::c());				\
		dbg() << #reg << " = c(" << (uintmax_t)Registers::c() << ')';	\
		p->consume();							\
		p->advance();							\
		break;								\
	case 0x03:								\
		Registers:: reg (Registers::d());				\
		dbg() << #reg << " = d(" << (uintmax_t)Registers::d() << ')';	\
		p->consume();							\
		p->advance();							\
		break;								\
	case 0x04:								\
		Registers:: reg (Registers::jump());				\
		dbg() << #reg << " = jump(" << (uintmax_t)Registers::d() << ')';	\
		p->consume();							\
		p->advance();							\
		break;								\
	case 0x05:								\
		Registers:: reg (Registers::ip());				\
		dbg() << #reg << " = ip(" << (uintmax_t)Registers::d() << ')';	\
		p->consume();							\
		p->advance();							\
		break;								\
	case 0x06:								\
		Registers:: reg (Registers::sp());				\
		dbg() << #reg << " = sp(" << (uintmax_t)Registers::d() << ')';	\
		p->consume();							\
		p->advance();							\
		break;								\
	default: 								\
		dbg("[2;30;1m[[0;31;2m  DEAD  [30;1m][m ")		\
			<< "Unknown reg on mov reg, reg: " << (uintmax_t)reg2;	\
		return 1;							\
}

bool RegMov::movregval(uint8_t* bytes, Parser* p, uint8_t reg1, uint8_t reg2) {
	switch (reg1) {
		case 0x00:
			REGVAL(a);
			p->consume();
			p->advance();
			break;
		case 0x01:
			REGVAL(b);
			p->consume();
			p->advance();
			break;
		case 0x02:
			REGVAL(c);
			p->consume();
			p->advance();
			break;
		case 0x03:
			REGVAL(d);
			p->consume();
			p->advance();
			break;
		case 0x04:
			REGVAL(jump);
			p->consume();
			p->advance();
			break;
		case 0x06:
			REGVAL(sp);
			p->consume();
			p->advance();
			break;
		default:
			dbg("[2;30;1m[[0;31;2m  DEAD  [30;1m][m ")
				<< "Unknown register on mov reg, val: " << (uintmax_t)reg1;
			return 1;

	}
	p->consume();
	p->advance();
	return 0;
}

bool RegMov::movregmem(uint8_t* bytes, Parser* p, uint8_t reg1, uint8_t reg2) {
	switch (reg1) {
		case 0x00:
			REGMEM(a);
			p->consume();
			p->advance();
			break;
		case 0x01:
			REGMEM(b);
			p->consume();
			p->advance();
			break;
		case 0x02:
			REGMEM(c);
			p->consume();
			p->advance();
			break;
		case 0x03:
			REGMEM(d);
			p->consume();
			p->advance();
			break;
		case 0x04:
			REGMEM(jump);
			p->consume();
			p->advance();
			break;
		case 0x06:
			REGMEM(sp);
			p->consume();
			p->advance();
			break;
		default:
			dbg("[2;30;1m[[0;31;2m  DEAD  [30;1m][m ")
				<< "Unknown register on mov reg, [val]: " << (uintmax_t)reg1;
			return 1;

	}
	p->consume();
	p->advance();
	return 0;
}

bool RegMov::movmemreg(uint8_t* bytes, Parser* p, uint8_t reg1, uint8_t reg2) {
	switch (reg1) {
		case 0x00:
			MEMREG(a);
			p->consume();
			p->advance();
			break;
		case 0x01:
			MEMREG(b);
			p->consume();
			p->advance();
			break;
		case 0x02:
			MEMREG(c);
			p->consume();
			p->advance();
			break;
		case 0x03:
			MEMREG(d);
			p->consume();
			p->advance();
			break;
		case 0x04:
			MEMREG(jump);
			p->consume();
			p->advance();
			break;
		case 0x06:
			MEMREG(sp);
			p->consume();
			p->advance();
			break;
		default:
			dbg("[2;30;1m[[0;31;2m  DEAD  [30;1m][m ")
				<< "Unknown register on mov [val], reg: " << (uintmax_t)reg1;
			return 1;

	}
	p->consume();
	p->advance();
	return 0;
}

bool RegMov::movregreg(Parser* p, uint8_t reg1, uint8_t reg2) {
	switch (reg1) {
		case 0x00:
			REGREG(a);
			p->consume();
			p->advance();
			break;
		case 0x01:
			REGREG(b);
			p->consume();
			p->advance();
			break;
		case 0x02:
			REGREG(c);
			p->consume();
			p->advance();
			break;
		case 0x03:
			REGREG(d);
			p->consume();
			p->advance();
			break;
		case 0x04:
			REGREG(jump);
			p->consume();
			p->advance();
			break;
		case 0x06:
			REGREG(sp);
			p->consume();
			p->advance();
			break;
		default:
			dbg("[2;30;1m[[0;31;2m  DEAD  [30;1m][m ")
				<< "Unknown register on mov reg(this) reg: " << (uintmax_t)reg1;
			return 1;

	}
	p->consume();
	p->advance();
	return 0;
}
